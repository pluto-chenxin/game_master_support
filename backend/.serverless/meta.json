{
  "C:\\Users\\jiche\\Documents\\Work\\game_master_support\\backend\\serverless.yml": {
    "versionFramework": "4.12.0",
    "servicePath": "C:\\Users\\jiche\\Documents\\Work\\game_master_support\\backend\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "game-master-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs16.x",
        "stage": "dev",
        "region": "us-west-2",
        "environment": {
          "DATABASE_URL": "\\",
          "JWT_SECRET": "<REDACTED>",
          "S3_BUCKET": "game-master-uploads20463",
          "NODE_ENV": "production"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::game-master-uploads20463/*"
          }
        ],
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-master-api-dev-api"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "game-master-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-master-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-master-api-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject",
                            "s3:GetObject"
                          ],
                          "Resource": "arn:aws:s3:::game-master-uploads20463/*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "game-master-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-cf4cc0b1-2a48",
                  "S3Key": "serverless/game-master-api/dev/1744674355516-2025-04-14T23:45:55.516Z/api.zip"
                },
                "Handler": "lambda.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "game-master-api-dev-api",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DATABASE_URL": "\\",
                    "JWT_SECRET": "<REDACTED>",
                    "S3_BUCKET": "game-master-uploads20463",
                    "NODE_ENV": "production"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "ApiLambdaVersion3S9ZM5WI4SfYij8cs19wEPBd0o1g26HCinjJMiOgs8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "R/B3bZa8NaMqLlO3cs3duTD16YNAIEcjggc5dBzvBI8="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-game-master-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1744674343830": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodProxyVarOptions",
                "ApiGatewayMethodProxyVarAny"
              ]
            },
            "ApiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-west-2-cf4cc0b1-2a48",
              "Export": {
                "Name": "sls-game-master-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersion3S9ZM5WI4SfYij8cs19wEPBd0o1g26HCinjJMiOgs8"
              },
              "Export": {
                "Name": "sls-game-master-api-dev-ApiLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-game-master-api-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "individually": true,
        "patterns": [
          "!node_modules/.prisma/**",
          "!node_modules/.cache/**",
          "!node_modules/@prisma/engines/**",
          "!node_modules/.bin/**",
          "!prisma/migrations/**",
          "!uploads/**",
          "!tests/**",
          "!coverage/**",
          "!.git/**",
          "!.vscode/**",
          "!*.log"
        ],
        "artifactsS3KeyDirname": "serverless/game-master-api/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-west-2-cf4cc0b1-2a48",
        "artifactDirectoryName": "serverless/game-master-api/dev/1744674355516-2025-04-14T23:45:55.516Z"
      },
      "functions": {
        "api": {
          "handler": "lambda.handler",
          "events": [
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "package": {
            "patterns": [
              "lambda.js",
              "src/**",
              "prisma/schema.prisma",
              "node_modules/@prisma/client/**",
              "node_modules/.prisma/client/**"
            ],
            "artifact": ".serverless\\api.zip"
          },
          "name": "game-master-api-dev-api",
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersion3S9ZM5WI4SfYij8cs19wEPBd0o1g26HCinjJMiOgs8"
        }
      },
      "plugins": [
        "serverless-prune-plugin"
      ],
      "custom": {
        "prune": {
          "automatic": true,
          "includeLayers": true,
          "number": 3
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "stage": "dev",
      "region": "us-west-2",
      "environment": {
        "DATABASE_URL": "\\",
        "JWT_SECRET": "<REDACTED>",
        "S3_BUCKET": "game-master-uploads20463",
        "NODE_ENV": "production"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::game-master-uploads20463/*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-master-api-dev-api"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "game-master-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-master-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-master-api-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:GetObject"
                        ],
                        "Resource": "arn:aws:s3:::game-master-uploads20463/*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "game-master-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-cf4cc0b1-2a48",
                "S3Key": "serverless/game-master-api/dev/1744674355516-2025-04-14T23:45:55.516Z/api.zip"
              },
              "Handler": "lambda.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "game-master-api-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_URL": "\\",
                  "JWT_SECRET": "<REDACTED>",
                  "S3_BUCKET": "game-master-uploads20463",
                  "NODE_ENV": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersion3S9ZM5WI4SfYij8cs19wEPBd0o1g26HCinjJMiOgs8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "R/B3bZa8NaMqLlO3cs3duTD16YNAIEcjggc5dBzvBI8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-game-master-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1744674343830": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProxyVarOptions",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "ApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-west-2-cf4cc0b1-2a48",
            "Export": {
              "Name": "sls-game-master-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersion3S9ZM5WI4SfYij8cs19wEPBd0o1g26HCinjJMiOgs8"
            },
            "Export": {
              "Name": "sls-game-master-api-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-game-master-api-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "An error occurred: ApiLambdaFunction - Resource handler returned message: \"Unzipped size must be smaller than 262144000 bytes (Service: Lambda, Status Code: 400, Request ID: f1c76193-fb98-439f-924f-51fc001480e9) (SDK Attempt Count: 1)\" (RequestToken: 5af53823-351f-d7fb-4964-f85b64b5aa6b, HandlerErrorCode: InvalidRequest).",
      "stack": "ServerlessError2: An error occurred: ApiLambdaFunction - Resource handler returned message: \"Unzipped size must be smaller than 262144000 bytes (Service: Lambda, Status Code: 400, Request ID: f1c76193-fb98-439f-924f-51fc001480e9) (SDK Attempt Count: 1)\" (RequestToken: 5af53823-351f-d7fb-4964-f85b64b5aa6b, HandlerErrorCode: InvalidRequest).\n    at file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:821:828\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async AwsDeploy.createFallback (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:821:23478)\n    at async aws:deploy:deploy:updateStack (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:832:7906)\n    at async PluginManager.runHooks (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1023:9549)\n    at async PluginManager.invoke (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1023:10318)\n    at async PluginManager.spawn (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1023:10677)\n    at async PluginManager.runHooks (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1023:9549)\n    at async PluginManager.invoke (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1023:10318)\n    at async PluginManager.run (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1023:11047)\n    at async Serverless.run (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1030:10523)\n    at async runFramework (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1057:1777)\n    at async TraditionalRunner.run (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1053:28313)\n    at async route (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1084:2779)\n    at async Object.run (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1085:3661)\n    at async run2 (file:///C:/Users/jiche/.serverless/releases/4.12.0/package/dist/sf-core.js:1085:4814)",
      "code": "AWS_CLOUD_FORMATION_CREATE_STACK_INTERNAL_LAMBDA_FUNCTION_CREATE_FAILED"
    },
    "serviceRawFile": "service: game-master-api\n\nprovider:\n  name: aws\n  runtime: nodejs16.x\n  stage: dev\n  region: us-west-2\n  environment:\n    DATABASE_URL: \\\n    JWT_SECRET: \\\n    S3_BUCKET: game-master-uploads20463\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource: arn:aws:s3:::game-master-uploads20463/*\n\npackage:\n  individually: true\n  patterns:\n    - '!node_modules/.prisma/**'\n    - '!node_modules/.cache/**'\n    - '!node_modules/@prisma/engines/**'\n    - '!node_modules/.bin/**'\n    - '!prisma/migrations/**'\n    - '!uploads/**'\n    - '!tests/**'\n    - '!coverage/**'\n    - '!.git/**'\n    - '!.vscode/**'\n    - '!*.log'\n\nfunctions:\n  api:\n    handler: lambda.handler\n    events:\n      - http:\n          path: /{proxy+}\n          method: any\n          cors: true\n    package:\n      patterns:\n        - 'lambda.js'\n        - 'src/**'\n        - 'prisma/schema.prisma'\n        - 'node_modules/@prisma/client/**'\n        - 'node_modules/.prisma/client/**'\r\n\nplugins:\n  - serverless-prune-plugin\n\ncustom:\n  prune:\n    automatic: true\n    includeLayers: true\n    number: 3\r\n",
    "command": [
      "deploy"
    ],
    "options": {
      "region": "us-west-2",
      "verbose": true
    },
    "orgId": "c8c73e04-7ded-4dc7-8330-9e36efabd8c0",
    "orgName": "ccjentertainment",
    "userId": "kTkS1QVvSt2fflcH9x",
    "userName": "ccjentertainment",
    "serviceProviderAwsAccountId": "518907780447",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}